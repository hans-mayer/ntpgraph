#!/usr/bin/ksh
# #!/usr/bin/bash

# Sat Feb 28 21:21:50 CET 2015 - mayer 
# Sun Mar 29 22:22:12 CEST 2015 - mayer - optimized arg parser , $YEAR
# Wed Apr  1 21:46:47 CEST 2015 - mayer - ip check 
# Wednesday, July 15, 2015 10:52:49 PM MEST - mayer 
# Sun Aug 16 14:44:04 CEST 2015 - mayer - bugfix $AWK 
# Sun Aug 23 20:03:01 CEST 2015 - mayer - bugfix endless loop
# Sat Jan  2 19:10:33 CET 2016 - mayer - y-label 
# Sun Jan 10 09:38:23 CET 2016 - mayer - x-range 
# Fri Feb  5 22:47:37 CET 2016 - mayer - fit ohne prevalue
# Sat Feb  6 19:43:12 CET 2016 - mayer - bugfix for label function 
# Mon Feb  8 20:51:40 CET 2016 - mayer - polynomfunktion ersten u zweiten grades 
# Tue Feb  9 21:37:19 CET 2016 - mayer - y-axis format
# Fri Feb 12 21:53:56 CET 2016 - mayer - fit function quiet, print results 
# Sat Feb 13 22:37:35 CET 2016 - mayer - show options 
# Sun Feb 14 18:04:52 CET 2016 - mayer - array of values with 8 decimal places 
# Wed Feb 24 21:19:12 CET 2016 - mayer - option w 
# Mon May  9 21:14:42 CEST 2016 - mayer - option c - range for calculation 


export DISPLAY DAYS TIMESPERH IP1 IP2 AWK STATSDIR PEERSTATS LIST YRANGE FILE XFIT YFIT FFIT UNWFIT LOGFIT FIT_LOG
export TERM YEAR LINES AVG AVGLINE SELDATE LOOPCNT XRANGE LBLPOS LINEX SETLBL POLYN PRRESULT SHOWOPT
export LINEWIDTH TIMEDIFFLOW TIMEDIFFHIGH

AWK=gawk
# default one point per hour 
TIMESPERH=1
# a temporary file deletede at the end 
LIST=/tmp/erg.dat.$$
# default output is to screen - could be file with option -f 
TERM="set term x11 persist"
# default this year 
YEAR=`TZ=GMT date '+%Y'`
# connect the point with curves - changed with option -l 
LINES="smooth csplines"
# miximum time difference, values below will be taken for calculation
TIMEDIFFLOW=-1.1
TIMEDIFFHIGH=1.1
LINEWIDTH=2
XTICS=1
XRANGE='[-0.5:24.8]'
LBLPOS=0.95


thisusage(){
    echo 
    echo "show time difference for 2 NTP server - v 2016 05 09 "
    echo "  author: ntpgraph@ma.yer.at "
    echo
    echo "usage: $0 [ -a ] [ -f ] [ -l ] [ -m value ] [ -c low high ] [ -t value ] [ -w value ] [ -y range ] [ -F n ] [ -L ] IP1 IP2 date "
    echo "       date is MMDD in year $YEAR or YYYYMMDD or . or - ( . is today, - is yesterday  ) "
    echo "       -x range      - low:high, example 1:10 , default autorange -0.5:24.8 , time in hours "
    echo "       -y range      - low:high, example -0.1:0.1 , default autorange " 
    echo "       -a            - print average line " 
    echo "       -l            - straight line instead of smooth csplines " 
    echo "       -f IMG        - output to file in current working directory - IMG can be jpeg, png, ... "
    echo "       -t number     - values per hour for average calculation, default is 1  "
    echo "       -m value      - maximum time difference - default 1.1 second "
    echo "       -c low high   - lower and upper limit to calculate - default 1.1 second "
    echo "       -F n          - fit function, n polynomial ( 1 or 2 ) "
    echo "       -L            - label at bottom - only for fit function "
    echo "       -w value      - line width "
    echo "       -D            - debug "
    echo 
    exit 1
}
 
type $AWK > /dev/null
if test $? -ne 0 
  then
    echo try to install $AWK 
    echo if not available try a symlink to awk or change this script 
    exit 1 
fi

# no limitation for the y-range , can be overwritten with -y 
YRANGE='[*:*]'
# check the arguments 
LOOPCNT=0
: echo argc: $# 
do_once=1
while test $# -gt 3 -o do_once -eq 1
  do
    : echo argc: $# 
    do_once=0
    case $1 in 
      -t ) TIMESPERH=$2 ; shift ; shift ; SHOWOPT="$SHOWOPT -t $TIMESPERH" ;; 
      -x ) XRANGE="[$2]" ; SHOWOPT="$SHOWOPT -x $2 h" ; shift ; shift ;;
      -y ) YRANGE="[$2]" ; SHOWOPT="$SHOWOPT -y $2" ; shift ; shift ;; 
      -a ) AVGLINE=", \"$LIST\" using 1:3 title 'average' $LINES ls 2 " ; shift ;; 
      -f ) FILE="set output \"plot_$$.$2\" " 
           TERM="set terminal $2"
           LINEWIDTH=1
           XTICS=2
           echo $FILE ; shift ; shift ;; 
      -l ) LINES="with lines" ; shift ;;
      -D ) DEBUG=y ; shift ;;
      -m ) TIMEDIFFLOW=-$2 ; TIMEDIFFHIGH=$2 ; shift ; shift ; SHOWOPT="$SHOWOPT -m $TIMEDIFFHIGH" ;; 
      -c ) TIMEDIFFLOW=$2 ; TIMEDIFFHIGH=$3 ; shift ; shift ; shift ; SHOWOPT="$SHOWOPT -c $TIMEDIFFLOW $TIMEDIFFHIGH" ;; 
      -F ) POLYN=$2 ; shift ; shift ; FFIT=', line(x) ' ; SHOWOPT="$SHOWOPT -F $POLYN" ;; 
      -L ) LBLPOS=0.1 ; shift ;;
      -w ) LINEWIDTH=$2 ; shift ; shift ;;
      -* ) thisusage ; exit 1 ;;
    esac 
    if test $# -lt 3 
      then 
        thisusage
        exit 1 
    fi
    LOOPCNT=$((LOOPCNT+1))
    # check if we are not running into an endless loop
    if test "$LOOPCNT" -gt 30
      then
        thisusage
        exit 1
    fi
  done 

: echo "$AVGLINE$ "

# now we should have 2 IP addresses and 1 date field 
if test $# -eq 3 
  then 
    IP1=$1 
    IP2=$2 
    MDATE=$3
  else 
    thisusage
    exit 1 
fi

if test -z "$FILE"
  then
    # check if DISPLAY is set ? 
    case "$DISPLAY" in
      localhost:* ) ;;
      "" )
	    if test -z "$DISPLAY" 
	      then 
	        echo $0: \$DISPLAY not set 
	        exit 1 
	    fi
	    ;; 
    esac
fi


# very rudimentary check of date
case "$MDATE" in
  [0-9\?][0-9\?][0-9\?][0-9\?] ) 
	SELDATE=$YEAR$MDATE ;;
  [12][90][0-9\?][0-9\?][0-9\?][0-9\?][0-9\?][0-9\?] ) 
	SELDATE=$MDATE ;;
  \. ) 	SELDATE=`TZ=GMT date +%Y%m%d` ;;
  - )   SELDATE=`TZ=GMT+24 date +%Y%m%d` ;;
  * )   echo $0: wrong date format - must be MMDD or YYYYMMDD or . 1>&2
        thisusage
        exit 1
        ;;
esac


# very rudimentary check of IP addresses - V4 and V6 
case "$IP1" in
  [1-9]*\.[0-9]*\.[0-9]*\.[0-9]* ) ;; 
  [1-9]*:* ) ;; 
  * ) 	thisusage
  	exit 1 ;;
esac 

case "$IP2" in
  [1-9]*\.[0-9]*\.[0-9]*\.[0-9]* ) ;; 
  [1-9]*:* ) ;; 
  * ) 	thisusage
  	exit 1 ;;
esac 

# check where the conf file is located 
CONF=N
if test -f /etc/ntp.conf 
  then 
    CONF=/etc/ntp.conf
fi
if test -f /etc/inet/ntp.conf 
  then 
    CONF=/etc/inet/ntp.conf
fi
if test $CONF = N 
  then 
    echo $0: ntp.conf not found 
    exit 1 
fi

# what is statsdir directory and peerstats file ? 
# awk is needed for solaris to strip off the leading blanks 
STATSDIR=`grep statsdir $CONF | grep -v '^#' | tr '""' '  ' | head -1 | $AWK '{ print ( $2 ) }'`
PEERSTATS=`grep filegen $CONF | grep peerstats | grep -v '^#' | head -1 | $AWK '{ print ( $4 ) }'`
: echo STATSDIR $STATSDIR PEERSTATS $PEERSTATS

# does at least one file exist ? 
ls $STATSDIR/${PEERSTATS}.$SELDATE > /dev/null 2>&1 
if test $? -ne 0 
  then
    echo $0: $STATSDIR/${PEERSTATS}.$SELDATE not found 
    exit 1
fi
DAYS=`ls  $STATSDIR/${PEERSTATS}.$SELDATE | wc -l | $AWK '{ print $1 }'`
: echo 

# peerstats column 2 are seconds after midnight 
# myarray enhaelt anzahl gefundenet zeilen pro stunde 
: echo $AWK -v DAYS=$DAYS -v TIMESPERH=$TIMESPERH -v IP1=$IP1 -v IP2=$IP2 
cat $STATSDIR/$PEERSTATS.$SELDATE | \
$AWK -v DAYS=$DAYS -v TIMESPERH=$TIMESPERH -v IP1=$IP1 -v IP2=$IP2 -v TIMEDIFFLOW=$TIMEDIFFLOW -v TIMEDIFFHIGH=$TIMEDIFFHIGH '
  BEGIN {
    # print ( "awk begin " ) ; 
    IP1LAST = -1 ; 
    IP2LAST = -1 ; 
    AVERAGE = 0 ; 
    CNT4AVG = 0 ; 
  }
  { TSLOT = int($2/3600*TIMESPERH) ;
    # print ( IP1 , IP1LAST, IP2, IP2LAST, $3, $5  ) ; 
    # initialisierung 
    if ( ( IP1 == $3 ) && ( IP1LAST == -1 ) ) { 
      # in diese bedingung faellt man nur einmal 
      # print ( "init IP1 " ) ; 
      IP1LAST = 1 ; 
      TIME1 = $5 ; 
    } ; 
    if ( ( IP2 == $3 ) && ( IP2LAST == -1 ) ) { 
      # in diese bedingung faellt man nur einmal 
      # print ( "init IP2 " ) ; 
      IP2LAST = 1 ; 
      TIME2 = $5 ; 
    } ; 
    # wenn die letzte IP die IP1 war und jetzt IP2 gelesen wird 
    if ( ( IP1LAST == 1 ) && ( IP2 == $3 ) ) {
      DIFFTIME = TIME1 - $5 ; 
      if ( ( DIFFTIME < TIMEDIFFHIGH ) && ( DIFFTIME > TIMEDIFFLOW ) ) { 
        # we are within the range where calculation takes place 
        # in myarray wird mitgezaehlt und aufsummiert 
        myarrayC[TSLOT]++ ; 
        myarrayT[TSLOT] += DIFFTIME ; 
        IP1LAST = 0 ; 
        IP2LAST = 1 ;
        AVERAGE += DIFFTIME ; 
        CNT4AVG++ ; 
      } 
      else 
        printf ( "%1.10f %s %02d:%02d:%02d %s \n" , DIFFTIME , $2, $2/3600, $2/60%60, $2%60, IP2 ) | "cat 1>&2" 
    } ; 
    if ( IP2 == $3 ) TIME2 = $5 ; 
    if ( ( IP2LAST == 1 ) && ( IP1 == $3 ) ) {
      DIFFTIME = $5 - TIME2 ; 
      if ( ( DIFFTIME < TIMEDIFFHIGH ) && ( DIFFTIME > TIMEDIFFLOW ) ) { 
        myarrayC[TSLOT]++ ; 
        myarrayT[TSLOT] += DIFFTIME ; 
        IP1LAST = 1 ; 
        IP2LAST = 0 ;
        AVERAGE += DIFFTIME ; 
        CNT4AVG++ ; 
      } 
      else 
        printf ( "%1.10f %s %02d:%02d:%02d %s \n" , DIFFTIME , $2, $2/3600, $2/60%60, $2%60, IP1 ) | "cat 1>&2" 
    } ; 
    if ( IP1 == $3 ) TIME1 = $5 ; 
    myarray[int($2/3600*TIMESPERH)]++ }
  END { 
    AVG = AVERAGE / CNT4AVG ; 
    for (i = 0 ; i <= 24*TIMESPERH ; i++ ) {
      # printf ( "%.2f %.6f %d %d \n", i/TIMESPERH, myarrayT[i], myarrayC[i], myarray[i] ) | "cat 1>&2" ; 
      if ( myarrayC[i] > 0 ) 
          printf ( "%.2f %.8f %.8f \n", i/TIMESPERH, myarrayT[i]/myarrayC[i], AVG ) ; 
        else 
          printf ( "# %.3f %.8f \n", 0, 0 ) ; 
    } ; 
    print ( "\n" ) ; 
    # print ( "average: " AVG "\n" ) | "cat 1>&2" ; 
  }' > $LIST

: exit 0 

HOST1=`getent hosts $IP1 | $AWK '{ print $2 }'`
HOST2=`getent hosts $IP2 | $AWK '{ print $2 }'`
if test -n "$AVGLINE" 
  then 
    AVG="- average: `grep -v '^#' $LIST | head -1 | $AWK '{ print $3 }'`"
fi
# if reverse lookup does not work take the IP 
if test -z "$HOST1"
  then 
    HOST1=$IP1
fi
if test -z "$HOST2"
  then 
    HOST2=$IP2
fi

# result file could be empty - avoid additional error messages 
if test ! -s "$LIST" 
  then 
    echo "no data found " 
    thisusage
    exit 1 
fi 

y0=0.0 
if test -n "$FFIT"
  then 
    LOGFIT="set fit logfile \"/tmp/fit.log.$$\""
    YFIT=`head -1 "$LIST" | $AWK '{ print ( "y0 = " , $2 ) }'`
    case "$POLYN" in
      1 ) 
    	UNWFIT="fit line(x) \"$LIST\" via y0, m"
    	XFIT='m = 0.01'
    	LINEX='line(x) = y0 + m*x' 
    	SETLBL="set label 2 sprintf(\"y0 = %2.7e \n m = %2.7e\",y0,m) left at graph 0.05, graph $LBLPOS" 
	PRRESULT="print \"y0 = \" , y0 ,\"\n m = \" , m " 
	;;
      2 ) 
    	UNWFIT="fit line(x) \"$LIST\" via y0, m, n"
    	XFIT='m = 0.01 ; n = 0.01 '
    	LINEX='line(x) = y0 + m*x + n*x*x' 
    	SETLBL="set label 2 sprintf(\"y0 = %2.7e \n m = %2.7e \n n = %2.7e \",y0,m,n) left at graph 0.05, graph $LBLPOS" 
	PRRESULT="print \"y0 = \" , y0 ,\"\n m = \" , m ,\"\n n = \" , n " 
	;;
      * ) 
        thisusage
        exit 1
	;;
    esac
fi 
FIT_LOG=/tmp/fit.log.$$

gnuplot << EOF
  $TERM
  $FILE 
  set title "`uname -n`: $IP1 - $IP2 - $SELDATE \n $HOST1 - $HOST2 $AVG\n$SHOWOPT"
  set xlabel "hour"
  set ylabel "offset (sec)"
  set xtics $XTICS
  # set ytics 10
  set xrange $XRANGE
  set yrange $YRANGE
  set style line 1 linewidth $LINEWIDTH
  set style line 2 linewidth 1
  set format y "%9.6f"
  set dummy x, y
  set fit quiet
  $LINEX
  $LOGFIT
  $XFIT
  $YFIT 
  $UNWFIT
  $SETLBL
  plot "$LIST" using 1:2 title 'offset' $LINES ls 1 $AVGLINE $FFIT 
  $PRRESULT
EOF

if test "$DEBUG" == y
  then
    if test -f $FIT_LOG 
      then
        ls -l $FIT_LOG
    fi
    echo STATSDIR $STATSDIR PEERSTATS ${PEERSTATS}.$SELDATE
    echo plotfile: $LIST
    echo "$AVG "
  else
    rm -f $LIST $FIT_LOG
fi

exit 0 

