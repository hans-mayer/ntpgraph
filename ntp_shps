#!/usr/bin/ksh

# Sat Feb 28 21:21:50 CET 2015 - mayer 
# Sun Mar 29 22:22:12 CEST 2015 - mayer - optimized arg parser , $YEAR
# Thu Apr  2 21:41:45 CEST 2015 - mayer - average u poll interval
# Wed Apr  8 23:01:16 CEST 2015 - mayer - options s and i 
# Fri Apr 10 23:43:13 CEST 2015 - mayer - offset and delay graph 
# Fri May 15 20:50:00 CEST 2015 - mayer - usage 
# Sat Jun 27 07:39:59 CEST 2015 - mayer - min max -m 
# Sun Jul 26 21:29:54 CEST 2015 - mayer - bugfix 
# Sun Aug 16 14:44:04 CEST 2015 - mayer - bugfix $AWK
# Sun Aug 23 20:03:01 CEST 2015 - mayer - bugfix endless loop 
# Mon Jan  4 23:48:56 CET 2016 - mayer - MYIPIS
# Wed Jan  6 00:08:03 CET 2016 - mayer - x-range 
# Fri Jan  8 23:29:38 CET 2016 - mayer - line width 
# Sun Jan 10 17:50:35 CET 2016 - mayer - fit 
# Fri Feb  5 22:47:37 CET 2016 - mayer - fit ohne prevalue 
# Sat Feb  6 20:24:46 CET 2016 - mayer - maybe bugfix 
# Mon Feb  8 20:51:40 CET 2016 - mayer - polynomfunktion ersten u zweiten grades
# Tue Feb  9 21:37:19 CET 2016 - mayer - y-axis format 
# Fri Feb 12 21:53:56 CET 2016 - mayer - fit function quiet, print results
# Sat Feb 13 21:59:47 CET 2016 - mayer - show options for -m and -F 
# Mon Feb 15 18:35:41 CET 2016 - mayer - loopstats file 
# Tue Feb 16 22:53:22 CET 2016 - mayer - bugfix arguments 



export DISPLAY DAYS TIMESPERH AWK STATSDIR STATSFILE LIST CNTONLY YLBL YEAR LINES SHOWOPT
export POLL TITLE AVG AVGLINE DTYPE DEBUG MIN MAX LINEWIDTH XTICS LOOPCNT MYIPIS XRANGE
export XFIT YFIT FFIT UNWFIT LOGFIT FIT_LOG LBLPOS LINEX SETLBL POLYN FORMATY PRRESULT 
export UNIQARGCNT STATSTYPE ARGC


AWK=gawk
TIMESPERH=1
CNTONLY=0
LIST=/tmp/erg.dat.$$
YLBL=percent 
# default this year
YEAR=`TZ=GMT date '+%Y'`
LINES="smooth csplines"
POLL=-1
DTYPE=x   	# display type -s -o -d -r or -i option 
DEBUG=n
# default output is to screen - could be file with option -f
STERM="set term x11 persist"
LINEWIDTH=2
XTICS=1
SHOWOPT=""
LBLPOS=0.95
UNIQARGCNT=0 	# unique arguments can apear only once 
STATSTYPE=peerstats
ARGC=2		# ip-addr and date for peerstats

thisusage(){
    echo 
    echo "show NTP peerstats or loopstats values as graph  - v 2016 02 16 "
    echo "  author: ntpgraph@ma.yer.at "
    echo 
    echo "usage: $0 [ -L ] -s|-i|-o|-d|-r|-j | -O|-D|-E|-S|-P [ -p value ] [ -t value ] [ -m min max ] [ -c value ] [ -l ] [ -w value ] [ -x range ][ -y range ] [ -F n ] [ -L ] [ -f IMG ] [ -Y string ] [ IP ] DATE "
    echo "       date is MMDD in year $YEAR or YYYYMMDD or . or - ( . is today, - is yesterday  ) "
    echo "       IP address  - only for peerstats graph, not for loopstats "
    echo "       -s          - success rate "
    echo "       -p value    - poll interval used for calculation of success rate, default 64 "
    echo "       -c          - y-axis is number and not percent , usefull for success rate "
    echo "       -i          - interval between updates "
    echo "       -a          - print average line "
    echo "       -l          - straight line instead of smooth csplines "
    echo "       -f IMG      - output to file - IMG can be jpeg, png, ... "
    echo "       -x range    - low:high, example 1:10.75 , default autorange -0.5:24.8 "
    echo "       -y range    - low:high, example -0.1:0.1 , default autorange "
    echo "       -t value    - timestemps per hour - default 1 "
    echo "       -w value    - line width "
    echo "       -m min max  - minimum and maximum values for calculation, only for next 4 options below "
    echo "       -o          - show offset from peerstats file - column 5 "
    echo "       -r          - show roundtrip delay from peerstats file - column 6 "
    echo "       -d          - show dispersion from peerstats file - column 7 "
    echo "       -j          - show rms jitter from peerstats file - column 8 "
    echo "       -F n        - fit function, n polynomial ( 1 or 2 )  "
    echo "       -b          - label at bottom - only for fit function "
    echo "       -Z          - debug "
    echo "       -Y string   - y-axis format, example 8.6f " 
    echo "       -L          - use loopstats file instead of peerstats file "
    echo "       -O          - show offset from loopstats file - column 3 "
    echo "       -D          - show drift compensation from loopstats file - column 4 "
    echo "       -E          - show estimated error from loopstats file - column 5 "
    echo "       -S          - show stability from loopstats file - column 6 "
    echo "       -P          - show polling interval from loopstats file - column 7 "
    echo 
    exit 1
}

# no limitation for the x-range , can be overwritten with -y
XRANGE='[-0.5:24.8]'
# no limitation for the y-range , can be overwritten with -y
YRANGE='[*:*]'
# check the arguments
LOOPCNT=0
# go at least 1 time into the loop / there is no do until 
do_once=1
while test $# -gt $ARGC -o do_once -eq 1
  do
    do_once=0
    case $1 in
      -t ) TIMESPERH=$2 ; shift ; shift ;;
      -c ) CNTONLY=1 
           YLBL=count 
           shift ;; 
      -l ) LINES="with lines" ; shift ;;
      -x ) XRANGE="[$2]" ; SHOWOPT="$SHOWOPT -x $2 h" ; shift ; shift ;;
      -y ) YRANGE="[$2]" ; SHOWOPT="$SHOWOPT -y $2" ; shift ; shift ;;
      -p ) POLL=$2 ; shift ; shift ;;
      -a ) AVGLINE=", \"$LIST\" using 1:3 title 'average' with lines ls 2 " ; shift ;;
      -s ) DTYPE=s ; shift ; UNIQARGCNT=$((UNIQARGCNT+1)) ;; 
      -i ) DTYPE=i ; LINES="" ; YLBL=interval ; shift ; UNIQARGCNT=$((UNIQARGCNT+1)) ;;
      -o ) DTYPE=o ; LINES="" ; YLBL='offset (sec)' ; shift ; UNIQARGCNT=$((UNIQARGCNT+1)) ;;
      -r ) DTYPE=r ; LINES="" ; YLBL='roundtrip delay' ; shift ; UNIQARGCNT=$((UNIQARGCNT+1)) ;;
      -d ) DTYPE=d ; LINES="" ; YLBL=dispersion ; shift ; UNIQARGCNT=$((UNIQARGCNT+1)) ;;
      -j ) DTYPE=j ; LINES="" ; YLBL=jitter ; shift ; UNIQARGCNT=$((UNIQARGCNT+1)) ;;
      -Z ) DEBUG=y ; shift ;; 
      -f ) FILE="set output \"plot_$$.$2\" "
           STERM="set terminal $2"
           LINEWIDTH=1
           XTICS=2
           echo $FILE ; shift ; shift ;;
      -m ) MIN=$2 ; MAX=$3 ; shift ; shift ; shift ; SHOWOPT="$SHOWOPT -m $MIN $MAX" ;; 
      -w ) LINEWIDTH=$2 ; shift ; shift ;; 
      -F ) POLYN=$2 ; shift ; shift ; FFIT=', line(x) ' ; SHOWOPT="$SHOWOPT -F $POLYN" ;;
      -b ) LBLPOS=0.1 ; shift ;; 
      -Y ) FORMATY="set format y \"%$2\"" ; shift ; shift ;; 
      -L ) STATSTYPE=loopstats ; shift ; ARGC=1 ;; 
      -O ) DTYPE=O ; LINES="" ; YLBL='offset (sec)' ; shift ; UNIQARGCNT=$((UNIQARGCNT+1)) ;; 
      -D ) DTYPE=D ; LINES="" ; YLBL='drift compensation' ; shift ; UNIQARGCNT=$((UNIQARGCNT+1)) ;; 
      -E ) DTYPE=E ; LINES="" ; YLBL='estimated error' ; shift ; UNIQARGCNT=$((UNIQARGCNT+1)) ;; 
      -S ) DTYPE=S ; LINES="" ; YLBL='stability' ; shift ; UNIQARGCNT=$((UNIQARGCNT+1)) ;; 
      -P ) DTYPE=P ; LINES="" ; YLBL='polling interval' ; shift ; UNIQARGCNT=$((UNIQARGCNT+1)) ;; 
      -* ) thisusage ; exit 1 ;; 
    esac
    if test $# -lt $ARGC
      then
        thisusage
        exit 1
    fi
    LOOPCNT=$((LOOPCNT+1))
    # check if we are not running into an endless loop 
    if test "$LOOPCNT" -gt 30 
      then
        thisusage
        exit 1
    fi
  done

case $DTYPE in
  x ) 
    echo 1>&2
    echo "option -s , -o , -d , -r , -j , -i or -O , -D , -E , -S , -P is mandatory " 1>&2 
    thisusage
    exit 1
    ;; 
  i|o|d|r|j|O|D|E|S|P ) 
    if test CNTONLY -eq 1 
      then 
        echo 1>&2
        echo "option -c not valid in combination with -i, -o, -d, -r or -j " 1>&2 
        thisusage
        exit 1
    fi
    ;; 
esac

if test $UNIQARGCNT -ne 1 
  then
    echo 1>&2
    echo "option -s , -o , -d , -r , -j or -i must be unique " 1>&2
    thisusage
    exit 1 
fi

if test $# -eq 2
  then
    IP1=$1
    MDATE=$2

    # very rudimentary check of IP addresses - V4 and V6 
    case "$IP1" in
      [1-9]*\.[0-9]*\.[0-9]*\.[0-9]* ) ;;
      [1-9]*:* ) ;; 
      * )   echo $0: bad IP address: "$IP1" 1>&2 
	    thisusage
            exit 1 ;;
    esac
  else
    MDATE=$1
fi

# very rudimentary check of date 
case "$MDATE" in 
  [0-9\?][0-9\?][0-9\?][0-9\?] ) 
        SELDATE=$YEAR$MDATE ;;
  [12][90][0-9\?][0-9\?][0-9\?][0-9\?][0-9\?][0-9\?] )
        SELDATE=$MDATE ;;
  \. )  SELDATE=`TZ=GMT date +%Y%m%d` ;;
  - )   SELDATE=`TZ=GMT+24 date +%Y%m%d` ;;
  * )   echo $0: wrong date format - must be MMDD or . 1>&2 
	thisusage
    	exit 1
    	;;
esac

if test -z "$FILE"
  then
    # check if DISPLAY is set ?
    case "$DISPLAY" in
      localhost:* ) ;;
      "" )  echo '$DISPLAY not set' ; exit 1 ;; 
      * ) ;;
    esac
fi

# check if gawk is available 
type $AWK > /dev/null
if test $? -ne 0
  then
    echo try to install $AWK
    echo if not available try a symlink to awk or change this script
    exit 1
fi

# check where the conf file is located
CONF=N
if test -f /etc/ntp.conf
  then
    CONF=/etc/ntp.conf
fi
if test -f /etc/inet/ntp.conf
  then
    CONF=/etc/inet/ntp.conf
fi
if test $CONF = N
  then
    echo $0: ntp.conf not found
    exit 1
fi

# is there a maxpoll interval 
# if test -n "`grep $IP1 $CONF | grep maxpoll`" 
#   then
#     MAXPOLL=`grep $IP1 $CONF | $AWK '{ for (i = 1; i <= NF; i++) if ( $i == "maxpoll" ) print ( $(i+1) ) }'`
#     echo MAXPOLL $MAXPOLL
# fi

if test $POLL -eq -1 
  then
    case $IP1 in 
      127.127.8.0 ) POLL=64 ;; 
      * ) POLL=1024 ;; 
    esac 
fi

# look what is statsdir directory and peerstats or loopstats file defined  
# awk is needed for solaris to strip off the leading blanks
STATSDIR=`grep statsdir $CONF | grep -v '^#' | tr '""' '  ' | head -1 | $AWK '{ print ( $2 ) }'`
STATSFILE=`grep filegen $CONF | grep $STATSTYPE | grep -v '^#' | head -1 | $AWK '{ print ( $4 ) }'`
if test "$DEBUG" == y
  then
    echo CONF $CONF
    echo STATSDIR $STATSDIR STATSFILE $STATSFILE.$SELDATE
    echo DAYS=$DAYS TIMESPERH=$TIMESPERH CNTONLY=$CNTONLY POLL=$POLL 
fi

if test ! -f $STATSDIR/${STATSFILE}.$SELDATE 
  then 
    echo $0: file $STATSDIR/${STATSFILE}.$SELDATE not found 
    exit 1 
fi 

DAYS=`ls  $STATSDIR/${STATSFILE}.$SELDATE | wc -l | $AWK '{ print $1 }'` 
: echo 

# peerstats column 2 are seconds after midnight 
# myarray enhaelt anzahl gefundenet zeilen pro stunde 

if test $DTYPE == s 
  then 
    # show success graph 
    cat $STATSDIR/$STATSFILE.$SELDATE | \
    grep $IP1 | \
    $AWK -v DAYS=$DAYS -v TIMESPERH=$TIMESPERH -v CNTONLY=$CNTONLY -v POLL=$POLL '
      BEGIN {
        AVERAGE = 0 ;
        CNT4AVG = 0 ;
      }
      { myarray[int($2/3600*TIMESPERH)]++ 
        CNT4AVG++ 
      }
      END { 
        for (i = 0 ; i < 24*TIMESPERH ; i++ ) 
          if ( CNTONLY == 1 ) {
              printf ( "%.2f %.2f %.2f \n", i/TIMESPERH, myarray[i]/DAYS*TIMESPERH, CNT4AVG/24.0/DAYS ) ; } 
            else 
              printf ( "%.2f %.2f %.2f \n", i/TIMESPERH, myarray[i]/DAYS*POLL/36.0*TIMESPERH, CNT4AVG*POLL/864/DAYS ) 
        # printf ( "\n" ) ; 
      }' > $LIST 
fi

if test $DTYPE == i 
  then 
    # show graph with intervals 
    cat $STATSDIR/$STATSFILE.$SELDATE | \
    grep $IP1 | \
    $AWK -v DAYS=$DAYS -v TIMESPERH=$TIMESPERH -v CNTONLY=$CNTONLY -v POLL=$POLL '
      BEGIN {
        AVERAGE = 0 ;
        INTERVALL = 0 ;
        CNT4INT = 0 ;
      }
      { if (INTERVALL>0) 
	  { myarrayint[CNT4INT] = $2-INTERVALL ; 
	    myarraytime[CNT4INT] = $2/3600.0 ; 
	    AVERAGE += $2-INTERVALL ; 
            CNT4INT++ ; 
          } ; 
        INTERVALL=$2 ; 
      } 
      END { 
        AVERAGE /= CNT4INT ; 
	for (i = 0 ; i < CNT4INT ; i++ ) 
              printf ( "%.4f %.2f %.2f \n", myarraytime[i], myarrayint[i], AVERAGE ) ;
      }' > $LIST
fi

if test $DTYPE == o -o $DTYPE == d -o $DTYPE == j -o $DTYPE == r -o $DTYPE == O -o $DTYPE == D -o $DTYPE == E -o $DTYPE == S -o $DTYPE == P
  then 
    # show offset / delay graph 
    case $DTYPE in 
      o ) COLUMN=5 ;; 
      r ) COLUMN=6 ;; 
      d ) COLUMN=7 ;; 
      j ) COLUMN=8 ;; 
      O ) COLUMN=3 ; IP1=. ;; 
      D ) COLUMN=4 ; IP1=. ;; 
      E ) COLUMN=5 ; IP1=. ;; 
      S ) COLUMN=6 ; IP1=. ;; 
      P ) COLUMN=7 ; IP1=. ;; 
      * ) echo "$0: fatal program error " 1>&2 
	  exit 1 ;; 
    esac 
    cat $STATSDIR/$STATSFILE.$SELDATE | \
    grep $IP1 | \
    $AWK -v DAYS=$DAYS -v TIMESPERH=$TIMESPERH -v CNTONLY=$CNTONLY -v POLL=$POLL -v COLUMN=$COLUMN -v MIN=$MIN -v MAX=$MAX '
      BEGIN {
        AVERAGE = 0 ;
        INTERVALL = 0 ;
        CNT4INT = 0 ;
      }
      { 
         if ( ( MIN == "" ) && ( MAX == "" ) ) {  
	   myarrayoffset[CNT4INT] = $COLUMN
	   myarraytime[CNT4INT] = $2/3600.0 ; 
	   AVERAGE += $COLUMN ; 
           CNT4INT++ ; 
         } else { 
           if ( ( $COLUMN >= MIN ) && ( $COLUMN <= MAX ) ) {
             myarrayoffset[CNT4INT] = $COLUMN
             myarraytime[CNT4INT] = $2/3600.0 ;
             AVERAGE += $COLUMN ;
             CNT4INT++ ;
           }
         }
      } 
      END { 
        if ( CNT4INT > 0 ) {
          AVERAGE /= CNT4INT ; 
        } ; 
	for (i = 0 ; i < CNT4INT ; i++ ) 
              printf ( "%.4f %.8f %.8f \n", myarraytime[i], myarrayoffset[i], AVERAGE ) ;
      }' > $LIST
fi

if test ! -s $LIST
  then
    echo "$0: error - file $LIST not generated - program terminated " 1>&2
    exit 1
fi

if test -n "$AVGLINE"
  then
    AVG="\n average: `grep -v '^#' $LIST | head -1 | $AWK '{ print $3 }'`"
fi

: exit 0 

# what's my IP 
type ip > /dev/null 2>&1 
if test $? -eq 0 
  then 
    MYIPIS="`uname -n`/`ip route get 244.0.0.0 | head -1 | $AWK '{ print $7 }'`"
  else 
    MYIPIS="`uname -n`"
fi

# IP1 ist . fuer loopstats file 
if test "$IP1" == '.' 
  then 
    TITLE="$MYIPIS $STATSTYPE - $SELDATE "
  else 
    HOST1=`getent hosts $IP1 | $AWK '{ print $2 }'`
    # if reverse lookup does not work take the IP
    if test -z "$HOST1"
      then
        TITLE="$MYIPIS $STATSTYPE - $IP1 - $SELDATE "
      else 
        TITLE="$MYIPIS $STATSTYPE - $IP1 - $HOST1 - $SELDATE "
    fi
fi

if test -n "$FFIT"
  then
    LOGFIT="set fit logfile \"/tmp/fit.log.$$\""
    YFIT=`head -1 "$LIST" | $AWK '{ print ( "y0 = " , $2 ) }'`
    case "$POLYN" in 
      1 ) 
    	UNWFIT="fit line(x) \"$LIST\" via y0, m"
    	XFIT='m = 0.01'
    	LINEX='line(x) = y0 + m*x'
    	SETLBL="set label 2 sprintf(\"y0 = %2.6e \n m = %2.6e\",y0,m) left at graph 0.05, graph $LBLPOS"
	PRRESULT="print \"y0 = \" , y0 ,\"\n m = \" , m "
	;;
      2 ) 
    	UNWFIT="fit line(x) \"$LIST\" via y0, m, n"
    	XFIT='m = 0.01 ; n = 0.01 '
    	LINEX='line(x) = y0 + m*x + n*x*x'
    	SETLBL="set label 2 sprintf(\"y0 = %2.6e \n m = %2.6e \n n = %2.6e \",y0,m,n) left at graph 0.05, graph $LBLPOS"
	PRRESULT="print \"y0 = \" , y0 ,\"\n m = \" , m ,\"\n n = \" , n "
	;;
      * ) 
        thisusage
        exit 1
	;;
    esac 
fi
FIT_LOG=/tmp/fit.log.$$

gnuplot << EOF
  $STERM
  $FILE
  set title "$TITLE $AVG\n$SHOWOPT"
  set xlabel "hour"
  set ylabel "$YLBL"
  set xtics $XTICS
  set xrange $XRANGE
  set yrange $YRANGE
  set style line 1 linewidth $LINEWIDTH
  set style line 2 linewidth $LINEWIDTH
  set fit quiet
  $FORMATY
  set dummy x, y
  $LINEX
  $LOGFIT
  $XFIT
  $YFIT
  $UNWFIT
  $SETLBL
  plot "$LIST" using 1:2 title "$YLBL" $LINES ls 1 $AVGLINE $FFIT  
  $PRRESULT
EOF

if test "$DEBUG" == y
  then
    if test -f $FIT_LOG
      then
        ls -l $FIT_LOG 
    fi
    echo plotfile: $LIST 
    echo "$AVG "
  else 
    rm -f $LIST $FIT_LOG 
fi

exit 0

